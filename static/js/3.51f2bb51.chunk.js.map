{"version":3,"sources":["redux/form/form-operations.js","Components/Section/Section.js","redux/form/contacts-selectors.js","Components/Form/Form.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","views/ContactsView.js"],"names":["fetchContactsRequest","actions","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","dispatch","a","axios","get","data","message","name","number","items","post","then","catch","error","contactId","delete","Section","children","className","getFilter","state","contacts","filter","getAllItems","getVisibleContacts","createSelector","toLowerCase","includes","InputForm","handleChange","e","setState","currentTarget","value","reset","handelSubmit","preventDefault","props","onSubmit","some","contact","alert","this","type","pattern","title","required","onChange","Component","connect","selectors","formOperations","onDelete","id","map","onClick","formActions","addFilter","target","ContactsView","fetchContacts"],"mappings":"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","file":"static/js/3.51f2bb51.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport actions from \"./form-actions\";\r\nconst {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} = actions;\r\n\r\nconst fetchContacts = () => async (dispatch) => {\r\n  dispatch(fetchContactsRequest());\r\n  try {\r\n    const { data } = await axios.get(\"/contacts\");\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error.message));\r\n  }\r\n  // axios\r\n  //   .get(\"/contacts\")\r\n  //   .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n  //   .catch((error) => dispatch(fetchContactsError(error)));\r\n};\r\nconst addContact = (name, number) => (dispatch) => {\r\n  const items = { name, number };\r\n  dispatch(addContactRequest());\r\n  axios\r\n    .post(\"/contacts\", items)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch((error) => dispatch(addContactError(error.message)));\r\n};\r\nconst deleteContact = (contactId) => (dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch((error) => dispatch(deleteContactError(error.message)));\r\n};\r\nexport default { fetchContacts, addContact, deleteContact };\r\n","import React from \"react\";\r\nimport \"./Section.css\";\r\n\r\nconst Section = ({ children }) => (\r\n  <section className=\"container\">{children}</section>\r\n);\r\nexport default Section;\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\nconst getFilter = (state) => state.contacts.filter;\r\nconst getAllItems = (state) => state.contacts.items;\r\nconst getVisibleContacts = createSelector(\r\n  [getFilter, getAllItems],\r\n  (filter, contacts) =>\r\n    contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(filter.toLowerCase())\r\n    )\r\n);\r\n// const getVisibleContacts = (state) => {\r\n//   const filter = getFilter(state);\r\n//   const contacts = getAllItems(state);\r\n//   return contacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(filter.toLowerCase())\r\n//   );\r\n// };\r\n\r\nexport default {\r\n  getFilter,\r\n  getAllItems,\r\n  getVisibleContacts,\r\n};\r\n","import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport formOperations from \"../../redux/form/form-operations\";\r\nimport selectors from \"../../redux/form/contacts-selectors\";\r\nimport \"./Form.css\";\r\n\r\nclass InputForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.currentTarget.name]: e.currentTarget.value,\r\n    });\r\n  };\r\n  reset = () => {\r\n    this.setState({\r\n      name: \"\",\r\n      number: \"\",\r\n    });\r\n  };\r\n  handelSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n    const { contacts, onSubmit } = this.props;\r\n\r\n    contacts.some(\r\n      (contact) => name.toLowerCase() === contact.name.toLowerCase()\r\n    )\r\n      ? alert(`${name} is already in contacts.`)\r\n      : onSubmit(name, number);\r\n\r\n    this.reset();\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form className=\"form\" onSubmit={this.handelSubmit}>\r\n        <label className=\"form-label\">\r\n          Name:\r\n          <input\r\n            className=\"form-input\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={this.handleChange}\r\n            value={name}\r\n          />\r\n        </label>\r\n        <label className=\"form-label\">\r\n          Number:\r\n          <input\r\n            className=\"form-input\"\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            onChange={this.handleChange}\r\n            value={number}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Add contacts</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  contacts: selectors.getAllItems(state),\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSubmit: (name, number) => dispatch(formOperations.addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InputForm);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport formOperations from \"../../redux/form/form-operations\";\r\nimport selectors from \"../../redux/form/contacts-selectors\";\r\nimport \"./ContactList.css\";\r\n\r\nconst ContactList = ({ contacts, onDelete }) => (\r\n  <ul className=\"contact-list\">\r\n    {contacts.map(({ id, name, number }) => (\r\n      <li className=\"contact-item\" key={id}>\r\n        <span className=\"contact-data-name\">{name}:</span>\r\n        <span className=\"contact-data-number\">{number}</span>\r\n\r\n        <button\r\n          className=\"delete__btn\"\r\n          onClick={() => onDelete(id)}\r\n          type=\"button\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  onDelete: PropTypes.func,\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  contacts: selectors.getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDelete: (id) => dispatch(formOperations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport formActions from \"../../redux/form/form-actions\";\r\nimport \"./Filter.css\";\r\nimport selectors from \"../../redux/form/contacts-selectors\";\r\n\r\nconst Filter = ({ onChange, value }) => {\r\n  return (\r\n    <div>\r\n      <h3> Find contact dy name </h3>\r\n      <label>\r\n        <input\r\n          className=\"filter-form\"\r\n          type=\"\"\r\n          name=\"filter\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          onChange={onChange}\r\n          value={value}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: selectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (e) => dispatch(formActions.addFilter(e.target.value)),\r\n});\r\n\r\nFilter.propTypes = {\r\n  handleOnChange: PropTypes.func,\r\n  value: PropTypes.string.isRequired,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport formOperations from \"../redux/form/form-operations\";\r\nimport formActions from \"../redux/form/form-actions\";\r\n\r\nimport Section from \"../Components/Section\";\r\nimport Form from \"../Components/Form\";\r\nimport ContactList from \"../Components/ContactList\";\r\nimport Filter from \"../Components/Filter\";\r\nclass ContactsView extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Section>\r\n        <h1>Phonebook</h1>\r\n        <Form />\r\n        <h2>Contacts</h2>\r\n        <Filter />\r\n        <ContactList />\r\n      </Section>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSubmit: (filter) => dispatch(formActions.addFilter(filter)),\r\n  fetchContacts: () => dispatch(formOperations.fetchContacts()),\r\n});\r\nexport default connect(null, mapDispatchToProps)(ContactsView);\r\n"],"sourceRoot":""}